{
	"swagger": "2.0",
	"info": {
		"version": "1.0.0",
		"title": "The Next Generation Molecular Breeding (NGMB) - API",
		"description": "This api provides the data related with molucular breeding in the new ways to find out!",
		"license": {
			"name": "Biosci(Thailand)",
			"url": "http:www.biosci.global"
		}
	},
	"host": "localhost:3000",
	"basePath": "/api/v1",
	"tags": [
		{
			"name": "Markerlists",
			"description": "The Next generation molecular breeding - Markerlist | API"
		},
		{
			"name": "Maps",
			"description": "The Next generation molecular breeding - Maps | API"
		},
		{
			"name": "Projects",
			"description": "The Next generation molecular breeding - Projects | API"
		}
	],
	"schemes": ["http"],
	"consumes": ["application/json"],
	"produces": ["application/json"],
	"paths": {
		"/": {
			"get": {
				"description": "Homepage of our API",
				"parameters": [],
				"summary": "Test homepage of the API.",
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "Welcome to our API-Index! We have created the first Swagger-API"
					}
				}
			}
		},
		"/markerlists": {
			"get": {
				"tags": ["Markerlists"],
				"summary": "Get all markerlists in the database.",
				"parameters": [],
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "All markerlist has fetched!",
						"schema": []
					}
				}
			},
			"post": {
				"tags": ["Markerlists"],
				"summary": "Create the new markerlist",
				"parameters": [
					{
						"name": "id",
						"in": "body",
						"required": true,
						"description": "The ID that specify the markerlist, auto generated by system.",
						"type": "string"
					},
					{
						"name": "name",
						"in": "body",
						"required": true,
						"description": "Name of the new markerlist that user specified.",
						"type": "string"
					},
					{
						"name": "markers",
						"in": "body",
						"required": true,
						"description": "The list of markers that user specify into the form.",
						"type": "array"
					}
				],
				"responses": {
					"200": {
						"description": "The new markerlist created successfully!"
					}
				}
			}
		},
		"/markerlists/{markerlistId}": {
			"get": {
				"tags": ["Markerlists"],
				"summary": "Get specific markerlist with its ID",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The markerlist id that user want to fetch from the markerlist table.",
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				],
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "The markerlist exist."
					},
					"500": {
						"description": "Internal server error!"
					}
				}
			},
			"delete": {
				"tags": ["Markerlists"],
				"summary": "Remove the existing markerlist inside the database.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "The id that define the markerlist that we want to remove.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The markerlist removed successfully!"
					}
				}
			}
		},
		"/maps": {
			"get": {
				"tags": ["Maps"],
				"description": "The maps API",
				"summary": "Get all existing maps in the database.",
				"parameters": [],
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "all map fetched successfully!"
					}
				}
			},
			"post": {
				"tags": ["Maps"],
				"summary": "Create the new map.",
				"parameters": [
					{
						"name": "id",
						"in": "body",
						"description": "The id that auto generated by the system.",
						"required": true,
						"type": "string"
					},
					{
						"name": "name",
						"in": "body",
						"description": "The maps name that use to create the new map name.",
						"required": true,
						"type": "string"
					},
					{
						"name": "description",
						"in": "body",
						"description": "The map description, user need to enter the brief detail for this new map.",
						"required": true,
						"type": "string"
					},
					{
						"name": "markers",
						"in": "body",
						"description": "The list of markers that stored inside this maps.",
						"required": true,
						"type": "array"
					}
				],
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "New maps create successfully!"
					}
				}
			}
		},
		"/maps/{mapId}": {
			"get": {
				"tags": ["Maps"],
				"description": "The maps API",
				"summary": "Get specific maps with map-id inside the database.",
				"parameters": [],
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "Map id has found!"
					}
				}
			},
			"delete": {
				"tags": ["Maps"],
				"summary": "Remove the specific map with their id.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The id that specific the map that the user want to remove.",
						"required": true,
						"type": "string"
					}
				],
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "Remove map successfully!"
					}
				}
			}
		},
		"/projects": {
			"get": {
				"tags": ["Projects"],
				"description": "The projects API.",
				"summary": "Get all projects in the database.",
				"parameters": [],
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "Welcome to our Projects API! We have created the first Swagger-API"
					}
				}
			},
			"post": {
				"tags": ["Projects"],
				"description": "Create the new project.",
				"summary": "Create the new project from user input.",
				"parameters": [
					{
						"name": "id",
						"in": "body",
						"required": true,
						"description": "Auto generate project-id",
						"type": "string",
						"schema": {
							"$ref": "#/definitions/"
						}
					},
					{
						"name": "projectname",
						"in": "body",
						"description": "input project-name",
						"schema": {
							"$ref": "#/definitions/"
						}
					}
				],
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "New project is created"
					}
				}
			}
		},
		"/projects/{projectId}": {
			"get": {
				"tags": ["Projects"],
				"summary": "Get the specific project with their project-id",
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"description": "The ID that define the specific project inside the database",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "The project has found!"
					}
				}
			},
			"delete": {
				"tags": ["Projects"],
				"summary": "Delete the specific project with their id",
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"description": "The ID that define the specific project inside the database",
						"type": "string"
					}
				],
				"response": {
					"200": {
						"description": "The project removes successfully!"
					}
				}
			}
		}
	},
	"definitions": {
		"User": {
			"required": ["email", "_id"],
			"properties": {
				"_id": {
					"type": "string",
					"uniqueItems": true
				},
				"email": {
					"type": "string",
					"uniqueItems": true
				},
				"lastName": {
					"type": "string"
				},
				"firstName": {
					"type": "string"
				}
			}
		},
		"Users": {
			"type": "array",
			"$ref": "#/definitions/User"
		}
	}
}
